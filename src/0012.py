# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import math


def no_math_solution(n: int):
    triangleNumber = 1
    nextAdd = 2
    divisorCount = 1
    while(divisorCount <= n):
        # loop and hope
        triangleNumber += nextAdd
        nextAdd += 1
        half = triangleNumber // 2
        divisorCount = 1  # 1
        d = 2
        while(d <= half):
            if(triangleNumber % d == 0):
                divisorCount += 1
            d += 1
        divisorCount += 1  # itself
    return triangleNumber


def math_solution(n: int):
    # 1 + 2 + ... + n = n(n + 1)/2
    # n and n + 1 is co prime
    # total number of divisors of a number is (exp_1 + 1)(exp_2 + 2)...(exp_k + 1)
    if(n == 0):
        return 1
    primes = [2]
    lastDivisorCount = 1  # 1
    curDivisorCount = 1  # 2
    cur = 2
    while(lastDivisorCount * curDivisorCount <= n):
        cur += 1
        root = math.floor(math.sqrt(cur))
        lastDivisorCount = curDivisorCount
        curDivisorCount = 0
        cpy = cur
        isPrime = True
        curDivisorCount = 1
        while(cpy % 2 == 0):
            curDivisorCount += 1
            cpy /= 2
            isPrime = False
        if(curDivisorCount != 1):
            curDivisorCount -= 1  # cur is even number, do the /2 part
        for p in primes[1:]:
            if(p > root):
                break
            exp = 0
            while(cpy % p == 0):
                isPrime = False
                exp += 1
                cpy /= p
            curDivisorCount *= (exp + 1)
        if(isPrime):
            # cur is prime number
            primes.append(cur)
            curDivisorCount = 2
    return cur * (cur-1) // 2


if __name__ == "__main__":
    # n = int(input())
    n = 500
    # print(no_math_solution(n))
    print(math_solution(n))
